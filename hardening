#!/usr/bin/python
# encoding: utf-8
#
#Copyright 2011 Frédéric Masi
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#
"""
This scripts implements changes required to meet the specifications descrideb by document ###need to include name of document###
"""

import os
import sys
import grp
import shutil
import subprocess
from optparse import OptionParser
from optparse import OptionGroup


def recursive_chmod(name, permission):
	"""
	Recursive chmod.
	This function takes two arguments the first one is the name of the folder or file and the second is the permission you like to recursively set.
	"""
	if os.path.isfile(name):
		print >> sys.stdout, "Changing permissions for file:\t\t", name
		os.chmod(name, permission)
	if os.path.isdir(name):
		for root, dirs, files in os.walk(name):
			print >> sys.stdout, 'Changing permissions for folder:\t\t', root
			os.chmod(root, permission)
			for file in files:
				print >> sys.stdout, 'Changing permission for file:\t\t', os.path.join(root, file)
				os.chmod(os.path.join(root, file), permission)


def gen3080():
	'''
	Seting up permissions to comply with GEN003080 specifications
	# Attention if you don't set the x bit on folders and you need to run this script a second time
	# You will need to run it as root
	'''
	try:
		recursive_chmod('/var/spool/cron', 0600)
		recursive_chmod('/etc/cron.d', 0600)
		recursive_chmod('/etc/crontab', 0600)
		recursive_chmod('/etc/cron.daily', 0700)
		recursive_chmod('/etc/cron.hourly', 0700)
		recursive_chmod('/etc/cron.monthly', 0700)
		recursive_chmod('/etc/cron.weekly', 0700)
	except OSError:
		print >> sys.stderr, 'You got an OS error'

		
def gen1260():
	try:
		subprocess.check_call(['sed', '-ie', 's/create 0664 root utmp/create 0640 root utmp/', '/etc/logrotate.conf'])
		subprocess.check_call(['sed', '-ie', 's/chmod 0644 /chmod 0640 /', '/etc/cron.daily/rpm'])
		recursive_chmod('/var/log/', 0640)
	except subprocess.CalledProcessError, error:
		print >> sys.stderr, error


def gen580():
	'''
	This function sets up pam.d and falgs all passwords as expired so that the system will comply with: "GEN000580 PASSWORD LENGTH"
	###FIX ME###
	# need to force all users to change password
	'''
	try:
		print >> sys.stdout, "Seting up system-auth-ac"
		shutil.copy2('./etc/pam.d/system-auth-ac', '/etc/pam.d/system-auth-ac')
		os.chown('/etc/pam.d/system-auth-ac', 0, 0)
		recursive_chmod('/etc/pam.d/system-auth-ac', 0644)
	except OSError:
		print >> sys.stderr, "There was a problem setuing up the password configuration files:\n"


def audit():
	'''
	This fuction configurs auditd to comply with GEN002720 GEN002740 and GEN002760 specifications
	'''
	# TURNING AUDITD ON
	chkconfig_exit_status = os.system('chkconfig auditd on')
	if chkconfig_exit_status == 0:
		print >> sys.stdout, "Audit service successfully setup to start at boot time."
	else:
		print >> sys.stderr, "There was a problem when seting up Audit service at boot time. Exit with error code: ", chkconfig_ext_status
		exit('error with chkconfig auditd on')
	# SETING UP THE AUDIT.RULES FILE
	'''
	###FIX ME###
	Using relative path names is bad. 
	If this script is called form outside the folder were the remaining files are located this will not work.
	Idealy we need a way to figure out the location of the script and the remaining files and then move to tha directory.
	'''
	try:
		print >> sys.stdout, "Seting up auditd rules"
		shutil.copy2('./etc/audit/audit.rules', '/etc/audit/audit.rules')
		os.chown('/etc/audit/audit.rules', 0, 0)
		recursive_chmod('/etc/audit/audit.rules', 0640)
	except OSError:
		print >> sys.stderr, 'There was a problem seting up the Audit rules file:\n'


def gen3200():
	'''
	Seting up permissions of /etc/cron.deny to comply with GEN003200
	'''
	try:
		recursive_chmod('/etc/cron.deny', 0700)
	except OSError:
		print >> sys.stderr, "There was a problem seting up premitions for /etc/cron.deny error:\n"


def snmp():
	'''
	Seting up permissions of /etc/snmp/snmpd.conf to comply with GEN005320.
	Seting up ownership of snmpd.conf and .mib to comply with GEN005360 root and sys
	'''
	try:
		recursive_chmod('/etc/snmp/snmpd.conf', 0700)
	except OSError:
		print >> sys.stderr, "There was a problem seting up permissions for /etc/snmp/snmpd.conf:\n"
		
	# This is an alternative to hardcoding the group number. No need to do that for root as its always 0
	sys_gid = grp.getgrnam('sys')[2]
	root_uid = 0
	try:
		print >> sys.stderr, "Changing ownership of snmpd config file"
		os.chown('/etc/snmp/snmpd.conf', root_uid, sys_gid)
	except OSError:
		print>> sys.stderr, "There was a problem seting up permissions for --------:\n"
	'''
	###FIX-ME###
	# For the mib files it might be better to first collect the resulf of a find comand. This would be required if the customer setup the lastes custom assertion mib
	'''


def gen5400():
	'''
	Seting up ownership and permissions of /etc/rsyslog.conf to comply with GEN005400.
	'''
	try:
		# Changing permission and ownership of rsyslog
		print >> sys.stdout, "Seting up permitions and ownership of rsyslog.conf"
		os.chown('/etc/rsyslog.conf', 0, 0)
		recursive_chmod('/etc/rsyslog.conf', 0640)

		# Changing permission and ownership of syslog
		print >> sys.stdout, "Seting up permission and ownership of syslog"
		os.chown('/etc/syslog.conf', 0, 0)
		recursive_chmod('/etc/syslog.conf', 0640)
	except OSError:
		print >> sys.stderr, "There was a problem setting up the ownership and/or permissions of /etc/rsyslog.conf:\n"


def lnx440():
	# Seting up file permissions for /etc/security/access.conf to comply with LNX00440
	"Note that by default on a ssg 6.1 the permission of this file is 640"
	try:
		recursive_chmod('/etc/security/access.conf', 0640)
	except OSError:
		print >> sys.stderr, "There was a problem setting up the permissions of /etc/security/access.conf:\n"


def menu_setup():
	# setup usage message
	usage = "usage: %prog [options]"
	version="%prog 1.0-rc1"
	# setup the parser and the defaul values
	parser = OptionParser(usage=usage, version=version)
	parser.set_defaults(all=True)
	parser.set_defaults(gen3080=False)
	parser.set_defaults(gen1260=False)
	parser.set_defaults(gen580=False)
	parser.set_defaults(audit=False)
	parser.set_defaults(gen3200=False)
	parser.set_defaults(snmp=False)
	parser.set_defaults(gen5400=False)
	parser.set_defaults(lnx440=False)
	
	# set the desire main options
	parser.add_option("-f", "--file", dest="filename",
										help="Use FILE as destination istead of the system syslog", metavar="FILE")
										
	parser.add_option("-a", "--all",
										action='store_true', dest='all',
										help='Turn on all the compliance modules - This is the DEFAULT')
										
	# Set up a menu group and its options
	group = OptionGroup(parser, "Compliance modules options",
	                    "This options enable specific modules on demand. The --all option will enable all of this options")
	
	# Creat the options for the Complinace module group
	group.add_option("--gen3080", action="store_true", dest='gen3080',
									help="Fixes file permissions to comply with GEN3080")
	
	group.add_option('--gen1260', action='store_true', dest='gen1260',
									help='Set-up permitions to comply with GEN001260')
									
	group.add_option('--gen580', action='store_true', dest='gen580',
									help='Set-up pam.d to comply with GEN580')
									
	group.add_option('--audit', action='store_true', dest='audit',
									help='Set-up audit.d to comply with gen2720, gen2740 and gen2760')
									
	group.add_option('--gen3200', action='store_true', dest='gen3200',
									help='Set-up permission for cron.deny to comply with GEN3200')
									
	group.add_option('--snmp', action='store_true', dest='snmp',
									help='Set-up permission and ownership of the snmp files to comply with GEN5320 and GEN5360')
									
	group.add_option('--gen5400', action='store_true', dest='gen5400',
									help='Set-up permissions and ownership of the loging system to comply with GEN4500')
									
	group.add_option('--lnx440', action='store_true', dest='lnx440',
									help='Set-up ownership of access.conf to comply with LNX440')
	
	parser.add_option_group(group)
	
	# Parse the comand line
	return(parser.parse_args())


def main():
	(options, agrs) = menu_setup()
	
	"""Need a better way to check for module otpinos"""
	option_list = [options.gen3080, options.gen1260, options.gen580, options.audit, options.gen3200, options.snmp, options.gen5400, options.lnx440]
	for item in option_list:
		if item == True:
			options.all = False
			
	# Checks if lunching all options is desired. If so sets all of them to true
	if options.all == True:
		options.gen3080 = True
		options.gen1260 = True
		options.gen580 = True
		options.audit = True
		options.gen3200 = True
		options.snmp = True
		options.gen5400 = True
		options.lnx440 = True
	# Lunch individual options as requested.
	if options.gen3080:
		gen3080()
	if options.gen1260:
		gen1260()
	if options.gen580:
		gen580()
	if options.audit:
		audit()
	if options.gen3200:
		gen3200()
	if options.snmp:
		snmp()
	if options.gen5400:
		gen5400()
	if options.lnx440:
		lnx440()


if __name__ == '__main__':
	main()

